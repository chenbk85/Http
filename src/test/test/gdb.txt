Catchpoint 1 (fork)
Starting program: /root/test/daemon 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffd000

Catchpoint 1 (forked process 19990), 0x0000003e8949a305 in fork () from /lib64/libc.so.6
[New process 19990]
0x0000003e8949a30b in fork () from /lib64/libc.so.6
0x0000003e8949a311 in fork () from /lib64/libc.so.6
Num     Type           Disp Enb Address            What
1       catchpoint     keep y                      fork, process 19990 
	catchpoint already hit 1 time
  Num  Description       
* 2    process 19990     
11		pid = fork();
12		if (pid < 0) {
13			perror("pid error");
14		} else if (pid == 0) {  // father process
15			printf("the child process is pid = %lld\n", (unsigned long long)getpid());
16			
17			thread_destroy_master(master);
18			master = thread_make_master();
19			daemon(1, 1);
20		}
0x0000003e8949a313 in fork () from /lib64/libc.so.6
0x0000003e8949a316 in fork () from /lib64/libc.so.6
0x0000003e8949a31c in fork () from /lib64/libc.so.6
0x0000003e8949a323 in fork () from /lib64/libc.so.6
0x0000003e8949a326 in fork () from /lib64/libc.so.6
0x0000003e8949a32c in fork () from /lib64/libc.so.6
0x0000003e8949a334 in fork () from /lib64/libc.so.6
0x0000003e8949a33c in fork () from /lib64/libc.so.6
Run till exit from #0  0x0000003e8949a33c in fork () from /lib64/libc.so.6
0x00000000004013f0 in main (argc=1, argv=0x7fffffffe758) at main.c:11
11		pid = fork();
12		if (pid < 0) {
14		} else if (pid == 0) {  // father process
15			printf("the child process is pid = %lld\n", (unsigned long long)getpid());
17			thread_destroy_master(master);
$1 = (thread_master_t *) 0x606010
type = struct _thread_master {
    thread_list_t read;
    thread_list_t write;
    thread_list_t timer;
    thread_list_t child;
    thread_list_t event;
    thread_list_t ready;
    thread_list_t unuse;
    fd_set readfd;
    fd_set writefd;
    fd_set exceptfd;
    long unsigned int alloc;
} *
$2 = {read = {head = 0x0, tail = 0x0, count = 0}, write = {head = 0x0, tail = 0x0, count = 0}, timer = {head = 0x0, tail = 0x0, count = 0}, child = {head = 0x0, tail = 0x0, count = 0}, event = {head = 0x0, tail = 0x0, count = 0}, 
  ready = {head = 0x0, tail = 0x0, count = 0}, unuse = {head = 0x0, tail = 0x0, count = 0}, readfd = {__fds_bits = {0 <repeats 16 times>}}, writefd = {__fds_bits = {0 <repeats 16 times>}}, exceptfd = {__fds_bits = {
      0 <repeats 16 times>}}, alloc = 0}
A debugging session is active.

	Inferior 2 [process 19990] will be killed.

Quit anyway? (y or n) Not confirmed.
Detaching from program: /root/test/daemon, process 19990
